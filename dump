pod setup
Ctrl +C
pod repo remove master
cd ~/.cocoapods/repos 
git clone --depth 1 https://github.com/CocoaPods/Specs.git master



#import <Foundation/Foundation.h>

#import <SpinKit/RTSpinKitView.h>
typedef void (^ CompletionBlock)(BOOL isCompleted, NSDictionary *userInfo);

#import <PureLayout/PureLayout.h>

#import <CocoaLumberjack/CocoaLumberjack.h>
#ifdef DEBUG
static const int ddLogLevel = DDLogLevelVerbose;
#else
static const int ddLogLevel = DDLogLevelWarning;
#endif

@interface CommonHelper : NSObject

@end

extern void setUpLumberJack();

extern void showSpinner(UIView *parentView, int spinnerTag, float spinnerSize, int duration, RTSpinKitViewStyle spinnerStyle, UIColor *spinnerColor, UIColor *backgroundColor, CompletionBlock completionBlock);
extern void hideSpinner(UIView *parentView, int spinnerTag);

extern void changeRootViewController();

-------------------------------------------------------------

//
//  Common.m
//  ChatApp
//
//  Created by Souvick Ghosh on 24/03/16.
//  Copyright © 2016 souvick. All rights reserved.
//

#import "CommonHelper.h"
#import "CommonNavigationController.h"
#import "HomeViewController.h"
#import "AppDelegate.h"

@implementation CommonHelper

@end

void setUpLumberJack() {
    [DDLog addLogger:[DDTTYLogger sharedInstance]];
    [DDLog addLogger:[DDASLLogger sharedInstance]];
    //    DDFileLogger *fileLogger = [[DDFileLogger alloc] init];
    //    fileLogger.rollingFrequency = 60 * 60 * 24;
    //    fileLogger.logFileManager.maximumNumberOfLogFiles = 7;
    //    [DDLog addLogger:fileLogger];
    
    //    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
    //    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor greenColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
    
}

void showSpinner(UIView *parentView, int spinnerTag, float spinnerSize, int duration, RTSpinKitViewStyle spinnerStyle, UIColor *spinnerColor, UIColor *backgroundColor, CompletionBlock completionBlock) {
    RTSpinKitView *spinner = [[RTSpinKitView alloc] initWithStyle:spinnerStyle];
    spinner.tag = spinnerTag;
    
    if(spinnerColor)
        spinner.color = spinnerColor;
    if(backgroundColor)
        spinner.backgroundColor = backgroundColor;
    
    [[parentView viewWithTag:spinnerTag] removeFromSuperview];
    
    if(spinnerSize>0.0) {
        spinner.spinnerSize = 100.0;
        [spinner sizeToFit];
    }
    
    [parentView addSubview:spinner];
    [spinner startAnimating];
    if(duration>0.0) {
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, duration * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
            [spinner removeFromSuperview];
            completionBlock(YES, nil);
        });
    } else {
        completionBlock(YES, nil);
    }
    
    [spinner setTranslatesAutoresizingMaskIntoConstraints:NO];
    [spinner autoAlignAxis:ALAxisHorizontal toSameAxisOfView:parentView];
    [spinner autoAlignAxis:ALAxisVertical toSameAxisOfView:parentView];
    
}

void hideSpinner(UIView *parentView, int spinnerTag) {
    [[parentView viewWithTag:spinnerTag] removeFromSuperview];
}

void changeRootViewController() {
    UIStoryboard *storyboard                            = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    CommonNavigationController *rootNavbarController    = [storyboard instantiateViewControllerWithIdentifier:@"CommonNavigationController"];
    HomeViewController *homeViewController              = [storyboard instantiateViewControllerWithIdentifier:@"HomeViewController"];
    [rootNavbarController setViewControllers:@[homeViewController]];
    [[AppDelegate delegate].window setRootViewController:homeViewController];
    [[AppDelegate delegate].window makeKeyAndVisible];
}

-------------------------------------------------------------

[[NSString alloc] initWithData:error.userInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] encoding:NSUTF8StringEncoding]




https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/ManagingFIlesandDirectories/ManagingFIlesandDirectories.html



https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/Finder.html

//
//  ViewController.m
//  WebRtcExample
//
//  Created by souvick on 11/07/17.
//  Copyright © 2017 souvick. All rights reserved.
//

#import "ViewController.h"
@import WebRTC;



@interface ViewController ()
@property (nonatomic) RTCPeerConnectionFactory *factory;
@property (nonatomic) RTCPeerConnection *peerConnection;
@property (strong, nonatomic) RTCMediaConstraints* constraints;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    //NSString *device = [UIDevice stringForDeviceType:[UIDevice deviceType]];
    
    //NSLog(@"%@", device);
    NSLog(@"%d", RTCInitializeSSL());
    _factory = [[RTCPeerConnectionFactory alloc] init];
    [self initRTCPeerConnection];
    
}

- (void)initRTCPeerConnection
{
    NSArray<RTCIceServer *> *iceServers = [NSArray arrayWithObjects:[[RTCIceServer alloc] initWithURLStrings:[NSArray arrayWithObjects:@"stun:stun.services.mozilla.com", nil]], [[RTCIceServer alloc] initWithURLStrings:[NSArray arrayWithObjects:@"stun:stun.l.google.com:19302", nil]] , nil];
    
    RTCConfiguration *config = [[RTCConfiguration alloc] init];
    [config setIceServers:iceServers];
    
    NSDictionary *mandatoryConstraints = @{
                                           @"OfferToReceiveAudio" : @"true",
                                           @"OfferToReceiveVideo" : @"true",
                                           };
    _constraints = [[RTCMediaConstraints alloc] initWithMandatoryConstraints:mandatoryConstraints optionalConstraints:nil];
    _peerConnection = [_factory peerConnectionWithConfiguration:config constraints:_constraints delegate:(id)self];
    
    
    

    RTCMediaStream *localStream = [_factory mediaStreamWithStreamId:@"someUniqueStreamLabel"];
    RTCAudioTrack *audioTrack = [_factory audioTrackWithTrackId:@"audio0"];
    [localStream addAudioTrack:audioTrack];
    [_peerConnection addStream:localStream];
    
    

    [_peerConnection offerForConstraints:_constraints completionHandler:^(RTCSessionDescription * _Nullable sdp, NSError * _Nullable error) {
        NSLog(@"SDP: %@//%@",sdp,error);
        [_peerConnection setLocalDescription:sdp completionHandler:^(NSError * _Nullable errorLocal) {
            
            NSLog(@"Local Error: %@",errorLocal);
        }];
        
        RTCSessionDescription *remoteDesc = [[RTCSessionDescription alloc] initWithType:RTCSdpTypeOffer sdp:sdp.sdp];
        [_peerConnection setRemoteDescription:remoteDesc completionHandler:^(NSError * _Nullable errorRemote) {
            NSLog(@"Remote Error:%@",errorRemote);
            
        }];
    }];
    
    
    

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/** Called when the SignalingState changed. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
didChangeSignalingState:(RTCSignalingState)stateChanged; {
    if (peerConnection.signalingState == RTCSignalingStateHaveLocalOffer) {
        // Send offer/answer through the signaling channel of our application
    } else if (peerConnection.signalingState == RTCSignalingStateHaveRemoteOffer) {
        // If we have a remote offer we should add it to the peer connection
        [_peerConnection answerForConstraints:_constraints completionHandler:^(RTCSessionDescription * _Nullable sdp, NSError * _Nullable error) {
            
            
        }];
    }
}

/** Called when media is received on a new stream from remote peer. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
          didAddStream:(RTCMediaStream *)stream; {
    
}

/** Called when a remote peer closes a stream. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
       didRemoveStream:(RTCMediaStream *)stream; {
    
}

/** Called when negotiation is needed, for example ICE has restarted. */
- (void)peerConnectionShouldNegotiate:(RTCPeerConnection *)peerConnection; {
    
}

/** Called any time the IceConnectionState changes. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
didChangeIceConnectionState:(RTCIceConnectionState)newState; {
    
}

/** Called any time the IceGatheringState changes. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
didChangeIceGatheringState:(RTCIceGatheringState)newState; {
    
}

/** New ice candidate has been found. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
didGenerateIceCandidate:(RTCIceCandidate *)candidate; {
    [_peerConnection addIceCandidate:candidate];
}

/** Called when a group of local Ice candidates have been removed. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
didRemoveIceCandidates:(NSArray<RTCIceCandidate *> *)candidates; {
    [_peerConnection removeIceCandidates:candidates];
    
}

/** New data channel has been opened. */
- (void)peerConnection:(RTCPeerConnection *)peerConnection
    didOpenDataChannel:(RTCDataChannel *)dataChannel; {
    
}

@end


- (void)addCircularButtons {
    float currentX = 0.0;
    float currentY = 0.0;
    float maxY = 0.0;

    for(int i=0;i<100;i++) {
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        [button setBackgroundColor:[UIColor colorWithHue:drand48() saturation:1.0 brightness:1.0 alpha:1.0]];
        
        float originX = currentX + [self generateRandomNumberWithlowerBound:10 upperBound:40];
        float originY = currentY + [self generateRandomNumberWithlowerBound:10 upperBound:40];
        float width = [self generateRandomNumberWithlowerBound:MINLENGTH upperBound:MAXLENGTH];
        float height = width;
        
        if(originX+width>self.scrollView.frame.size.width) {
            /*Add New Line*/
            currentY = maxY;
            currentX = 0.0;
            originY = currentY + [self generateRandomNumberWithlowerBound:0 upperBound:20];
            originX = currentX + [self generateRandomNumberWithlowerBound:10 upperBound:40];
            
        }
        
        if(originY+height>maxY) {
            maxY = originY+height;
        }
        
        currentX = originX+width;
        NSLog(@"%f--%F--%F",currentX,originX,width);
        button.frame = CGRectMake(originX, originY, width, height);
        button.layer.cornerRadius = (float)width/2.0;
        button.layer.masksToBounds = YES;
        [self.scrollView addSubview:button];
    }
}

-(int) generateRandomNumberWithlowerBound:(int)lowerBound
                               upperBound:(int)upperBound
{
    int rndValue = lowerBound + arc4random() % (upperBound - lowerBound);
    return rndValue;
}


